@page "/identity/account/register"
@using Client.Pages.OtherPages
@using Syncfusion.Blazor.Popups

@layout AuthenticationLayout

@inject SfDialogService DialogService

<div class="container">
    <div class="row">
        <div class="col-lg-4"></div>
        <div class="col-lg-4">
            <EditForm Enhance Model="User" OnValidSubmit="HandleRegister">
                <DataAnnotationsValidator />
                <div class="card bg-dark"
                    style="opacity: 0.9; margin-top: 50%; border-radius: 10px; color: white; font-weight: bold;">
                    <div class="card-header text-center fs-5">Register an account</div>
                    <div class="container">
                        <div class="row">
                            <div class="col-lg-4 col-md-4 col-sm-4"></div>
                            <div class="col-lg-4 col-md-4 col-sm-4 d-flex justify-content-center">
                                <img src="../images/companyLogos/mavzerpansiyon.png" alt="Mavzer Pansiyon"
                                    style="border-radius: 20px;" height="100">
                            </div>
                            <div class="col-lg-4 col-md-4 col-sm-4"></div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            <label class="form-label">Fullname</label>
                            <InputText class="form-control" @bind-Value="User.Fullname" />
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Email</label>
                            <InputText class="form-control" @bind-Value="User.Email" autocomplete="off" />
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Password</label>
                            <InputText type="password" autocomplete="new-password" class="form-control" @bind-Value="User.Password"                                />
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Confirm Password</label>
                            <InputText type="password" autocomplete="new-password" class="form-control" @bind-Value="User.ConfirmPassword" />
                        </div>
                        <div class="form-group mt-3">
                            @if (ShowLoadingButton)
                            {
                                <ButtonLoadingSpinner />
                            }
                            else
                            {
                                <button class="btn btn-outline-primary float-end" type="submit">Register</button>
                            }
                        </div>
                    </div>
                    <div class="card-footer">
                        <span class="text-center">
                            Have account already?
                            <a href="identity/account/login">Sign In</a>
                            <ValidationSummary />
                        </span>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="col-lg-4"></div>
    </div>
</div>

@code {
    public bool ShowLoadingButton { get; set; } = false;
    Register User = new();
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }

    async Task HandleRegister()
    {
        ShowLoadingButton = true;
        var response = await accountService.CreateAsync(User);
        if (response.Flag)
        {
            await DisplayDialog(response.Message, "Register Success");
            User = new();
        }
        else
        {
            await DisplayDialog(response.Message, "Register Failed");
        }
        ShowLoadingButton = false;
    }
    private async Task DisplayDialog(string content, string title)
    {
        await DialogService.AlertAsync(content, title);
    }

    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationState).User;
        bool isAuthenticated = user.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
            NavManager.NavigateTo("/home/dashboard");
    }
}