@page "/general/department"

@implements IDisposable

<div class="container mt-5">
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="float-start">Department</h4>
                    <button class="btn btn-outline-success float-end" @onclick="AddButtonClicked">
                        <i class="bi bi-plus-circle-dotted"></i>
                        Add Department
                    </button>
                </div>
                <div class="card-header" style="max-height: 580px; overflow-x: hidden; overflow-y: scroll;">
                    <div class="card-body">
                        <table class="table table-striped">
                            <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Id</th>
                                <th scope="col">Name</th>
                                <th scope="col">General Department</th>
                                <th scope="col">Action</th>
                            </tr>
                            </thead>
                            <tbody>
                            @if (Departments.Any())
                            {
                                for (int i = 0; i < Departments.Count; i++)
                                {
                                    Department department = Departments[i];
                                    <tr>
                                        <th scope="row">
                                            @(i + 1)
                                        </th>
                                        <td>@department.Id</td>
                                        <td>@department.Name</td>
                                        <td>@department.GeneralDepartment?.Name</td>
                                        <td>
                                            <i class="bi bi-pencil text-info cursorStyle" @onclick="() => EditButtonClicked(department)"></i>
                                            <i class="bi bi-trash text-danger cursorStyle" @onclick="() => DeleteButtonClicked(department)"></i>
                                        </td>
                                    </tr>
                                }
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<style>
    .cursorStyle {
        cursor: pointer;
    }
</style>

<DepartmentDialog @ref="_departmentDialog" Department="_department" GeneralDepartments="GeneralDepartments" OnSave="OnSave"></DepartmentDialog>

@code {
    public string Title { get; set; } = "Add";
    DepartmentDialog? _departmentDialog;
    Department _department = new();
    public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
    private List<Department> Departments { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetDepartments();
        await GetGeneralDepartments();
        GlobalState.Action += StateHasChanged;
    }

    private async Task GetDepartments()
    {
        var response = await DepartmentService.GetAll(Constants.DepartmentBaseUrl);
        Departments = response.OrderByDescending(x => x.Id).ToList();
        StateHasChanged();
    }

    private async Task GetGeneralDepartments()
    {
        var response = await GeneralDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
        GeneralDepartments = response.OrderByDescending(x => x.Id).ToList();
        StateHasChanged();
    }

    void AddButtonClicked()
    {
        _department = new();
        _departmentDialog?.ChangeTitle("Add");
        _departmentDialog?.OpenDialog();
    }

    void EditButtonClicked(Department department)
    {
        _department = department;
        _departmentDialog?.ChangeTitle("Edit");
        _departmentDialog?.OpenDialog();
    }

    async Task DeleteButtonClicked(Department department)
    {
        bool confirm = await DialogService.ConfirmAsync($"Are you sure you want to delete {department.Name}?", "Confirm Delete!");
        if (!confirm) return;

        var response = await DepartmentService.DeleteById(department.Id, Constants.DepartmentBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetDepartments();
    }

    private async Task OnSave(Department department)
    {
        bool successCheck;

        if (department.Id > 0)
        {
            var response = await DepartmentService.Update(department, Constants.DepartmentBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        else
        {
            var response = await DepartmentService.Create(department, Constants.DepartmentBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }

        if (successCheck)
        {
            department = new();
            await GetDepartments();
            _departmentDialog?.ChangeTitle("Add");
            _departmentDialog?.CloseDialog();
        }
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await DialogService.AlertAsync(message, "Success!");
            return true;
        }
        else
        {
            await DialogService.AlertAsync(message, "Error!");
            return false;
        }
    }


    public void Dispose()
    {
        GlobalState.Action -= StateHasChanged;
    }

}